{"componentChunkName":"component---src-templates-blog-post-js","path":"/darg-drop/","result":{"data":{"site":{"siteMetadata":{"title":"Yong-log"}},"markdownRemark":{"id":"9eefc515-597a-5c7e-b5d9-ff0242fd3b49","excerpt":"지난 프로젝트에서 pdf viewer 내부에서 pan and zoom 기능을 구현했다.\n먼저 이번 포스트를 통해 JS로 드래그 앤 드롭을 구현할 예정이다. Drag\n 먼저 마우스 이동거리 계산을 위해 mouseDown…","html":"<p>지난 프로젝트에서 pdf viewer 내부에서 pan and zoom 기능을 구현했다.\n먼저 이번 포스트를 통해 JS로 드래그 앤 드롭을 구현할 예정이다.</p>\n<p><img src=\"https://portfolio-yong.s3.ap-northeast-2.amazonaws.com/blog/drag/drag.gif\" alt=\"Drag\">\n<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> startX<span class=\"token punctuation\">,</span> startY<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> initialX<span class=\"token punctuation\">,</span> initialY<span class=\"token punctuation\">;</span> </code></pre></div>\n<p>먼저 마우스 이동거리 계산을 위해 mouseDown 좌표를 저장할 변수(<code class=\"language-text\">startX</code>, <code class=\"language-text\">startY</code>)와 드래그 하고자 하는 요소 (이하 draggable)의 초기 위치를 저장하기 위한 변수(<code class=\"language-text\">initialX</code>, <code class=\"language-text\">initialY</code>)를 생성한다.\n<br/>\n<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">draggable<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    startX <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">;</span>\n    startY <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientY<span class=\"token punctuation\">;</span>\n    initialX <span class=\"token operator\">=</span> draggable<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 요소의 현재 left 값을 저장</span>\n    initialY <span class=\"token operator\">=</span> draggable<span class=\"token punctuation\">.</span>offsetTop<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 요소의 현재 top 값을 저장</span>\n    isDragging <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    draggable<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">=</span> <span class=\"token string\">'grabbing'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이후 draggable 요소에 <code class=\"language-text\">mousedown</code> eventListener를 추가해준다. <br/>\n<code class=\"language-text\">e.clientX</code>, <code class=\"language-text\">e.clientY</code>를 통해 mouseDown이 발생했을 때 마우스 좌표를 startX,Y값을 startX, startY에 저장하고,<br/>\n<code class=\"language-text\">offsetLeft</code>, <code class=\"language-text\">offsetTop</code>을 이용해 요소의 현재 위치를 <code class=\"language-text\">initialX</code> <code class=\"language-text\">initialY</code>에 저장한다. <br/>\n</br></p>\n<blockquote>\n<p>이 코드에서는 draggable의 부모가 body이기 때문에 offsetLeft, Top을 사용했다.\n상황에 따라 다르게 사용해야한다!</p>\n</blockquote>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDragging<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> moveX <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> startX <span class=\"token operator\">+</span> initialX<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> moveY <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">-</span> startY <span class=\"token operator\">+</span> initialY<span class=\"token punctuation\">;</span>\n\n        draggable<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>moveX<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        draggable<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>moveY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번엔 mousemove 이벤트 리스너를 추가한다.\n여기서 <code class=\"language-text\">e.clientX</code>와 <code class=\"language-text\">e.clientY</code>를 사용하여 현재 마우스 위치에서 <code class=\"language-text\">mousedown</code> 시점의 좌표를 빼고, 초기 위치(<code class=\"language-text\">initialX</code>, <code class=\"language-text\">initialY</code>)를 더해 최종적인 요소의 위치를 계산한다.</br></p>\n<p>그리고 드래그 후 드랍한 위치에서 다시 드래그를 하려면 <code class=\"language-text\">initialX,Y</code>를 꼭 더해줘야한다. </br>\n<code class=\"language-text\">e.clientX</code> - <code class=\"language-text\">startX</code>, <code class=\"language-text\">e.clientY</code> - <code class=\"language-text\">startY</code>는 0에서부터 증가한다.</br>\ndrop을 하고 다시 잡아끄는 순간 0이되면서 <code class=\"language-text\">draggable.style.left</code>, <code class=\"language-text\">draggable.style.top</code>값이 0이되면서 초기 렌더되는 위치로 돌아간다.</br>\n</br></p>\n<blockquote>\n<p>단순하게 마우스 이동거리만 계산 했다가 원하는 대로 이동하지 않았던 경험이 있다ㅠ</p>\n</blockquote>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDragging<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        isDragging <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        draggable<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">=</span> <span class=\"token string\">'grab'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 커서 스타일 복원</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>드래그를 종료하기 위해 mouseup 이벤트를 document에 추가한다.</br>\n마우스 버튼을 놓을 때, isDragging 플래그를 false로 설정하여 드래그 상태를 해제하고, 커서 스타일을 원래대로 돌려놓는다. </br></br></p>\n<p>코드 &#x26; 결과물</p>\n<iframe \n    height=\"400\" style=\"width: 100%;\" scrolling=\"no\" title=\"Untitled\" \n    src=\"https://codepen.io/yongho1212/embed/gOyBjzW?default-tab=html%2Cresult\" \n    frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"\n    >\n    See the Pen \n    <a href=\"https://codepen.io/yongho1212/pen/gOyBjzW\">\n        Untitled\n    </a> \n    by yongho1212 (<a href=\"https://codepen.io/yongho1212\">@yongho1212</a>)\n    on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>","frontmatter":{"title":"JS 드래그 앤 드롭(Drag and Drop) 구현하기","date":"April 20, 2024","description":"바닐라 자바스크립트로 드래그 앤 드롭 기능 구현해보기"}},"previous":null,"next":{"fields":{"slug":"/zoom and pan/"},"frontmatter":{"title":"JS 줌 앤 팬(Zoom and Pan) 구현하기(1)"}}},"pageContext":{"id":"9eefc515-597a-5c7e-b5d9-ff0242fd3b49","previousPostId":null,"nextPostId":"7ca95fed-c843-5300-ae8a-97ab048de0e2"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}