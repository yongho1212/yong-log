{"componentChunkName":"component---src-templates-blog-post-js","path":"/zoom and pan/","result":{"data":{"site":{"siteMetadata":{"title":"Yong-log"}},"markdownRemark":{"id":"7ca95fed-c843-5300-ae8a-97ab048de0e2","excerpt":"지난 프로젝트에서 개발했던 주요 기능중 하나는 웹 메거진을 보는 pdf viewer…","html":"</br>\n<p>지난 프로젝트에서 개발했던 주요 기능중 하나는 웹 메거진을 보는 pdf viewer에 스크롤을 통한 확대 축소 및 드래그를 통한 탐색 기능이었다.\n</br></p>\n<p>당시에는 시간에 쫓겨 라이브러리로 구현했지만 이번 기회에 줌 앤 팬 기능을 바닐라 자바스크립트로 직접 구현해볼것이다.\n</br></p>\n<img src=\"https://portfolio-yong.s3.ap-northeast-2.amazonaws.com/blog/zoom+and+pan/panzoom.gif\" width=\"1000\" height=\"400\">\n<img src=\"https://portfolio-yong.s3.ap-northeast-2.amazonaws.com/blog/zoom+and+pan/target.png\" width=\"1000\" height=\"400\">\n<br>\n<h3>구현해야할 기능들</h3>\n<ul>\n<li>-wheel을 통한 scale 변경</li>\n<li>-drag 기능</li>\n<li>-bound 기능</li>\n</ul>\n<br/>\n<p>정리하면 마위스 휠을 통해 scale을 조절하여 zoom-in, zoom-out 기능을 구현해야하고</p>\n<p>확대가 된 상태에서 drag를 통해 viewer 영역 밖에 있는 컨텐츠를 탐색이 가능해야한다.</p>\n<p>마지막으로 드래그시 컨텐츠의 모서리가 viewer 모서리보다 안으로 들어오면 안된다.</p>\n</br>\n<p>먼저 컨텐츠가 담겨있는 요소는 <code class=\"language-text\">#target</code>으로 사용자가 보는 영역은 <code class=\"language-text\">#viewer</code>로 아이디 값을 지정해 주었다.</p>\n</br>\n<p>이제 wheel을 통한 scale변경을 구현해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">viewer<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wheel'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> rect <span class=\"token operator\">=</span> viewer<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> mouseX <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> mouseY <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> deltaScale <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>deltaY<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> newScale <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> scale <span class=\"token operator\">+</span> deltaScale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        scale <span class=\"token operator\">=</span> newScale<span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transformOrigin <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mouseX<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mouseY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">scale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>scale<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>처음에는 단순히 <code class=\"language-text\">e.clientX</code>, <code class=\"language-text\">e.clientY</code>로 좌표를 받고 그 좌표를 <code class=\"language-text\">transformOrigin</code>으로 설정하여 <code class=\"language-text\">scale</code>을 변경하고자 했다.\n</br>\n이렇게 하면 zoom-in, zoom-out는 잘 동작한다.</p>\n<p>문제는 드래그로 <code class=\"language-text\">target</code>의 위치를 이동시킬 때 <code class=\"language-text\">transform</code>의 <code class=\"language-text\">translate</code>을 이용해서 이동시키는데\nscale을 변경하고 첫 드래그 시 target의 위치정보가 없어서 점프하는 현상이 일어났다.</p>\n<img src=\"https://portfolio-yong.s3.ap-northeast-2.amazonaws.com/blog/zoom+and+pan/pan+jump.gif\" width=\"1000\" height=\"400\">\n<br>\n<p>그래서 <code class=\"language-text\">transform-origin</code>을 직접 구현해줬다.</p>\n<br>\n<img src=\"https://portfolio-yong.s3.ap-northeast-2.amazonaws.com/blog/zoom+and+pan/tr1.png\" width=\"1000\" height=\"300\">\n<br>\n<p>우선 viewer 중앙 우측 상단에 휠 이벤트를 발생시켜보자. (초록책 점)</p>\n<br>\n<img src=\"https://portfolio-yong.s3.ap-northeast-2.amazonaws.com/blog/zoom+and+pan/tr2.png\" width=\"1000\" height=\"300\">\n<br>\n<p><code class=\"language-text\">transform-origin</code> 속성의 기본 값은 50% 50%이기 때문에 중앙을 기준으로 확대된다.</p>\n</br>\n<p>우측 상단을 기준으로 확대되는것 처럼 보이게 하려면 target이 좌측 하단 화살표만큼 움직여줘야한다.</p>\n<br>\n<img src=\"https://portfolio-yong.s3.ap-northeast-2.amazonaws.com/blog/zoom+and+pan/tr3.png\" width=\"1000\" height=\"300\">\n</br>\n<h3>그럼 어떻게 얼마만큼 움직여야할까?</h3>\n</br>\n<p>현재 scale변경은 viewer의 중앙점을 기준으로 이루어진다. 즉 중앙이 겹쳐있는 상태에서 x축을 기준으로 오른쪽으로 움직이면 +, 왼쪽으로 움직이면 -, y축은 아래로 움직이면 +, 위로 움직이면 -가 된다.</p>\n</br>\n<p>이미지 2번에서 3번으로 변하려면 target이 좌하단으로 이동해야한다.\n</br></p>\n<p>우선 스크롤 이벤트가 발생환 좌표와 viewer의 중앙좌표 사이의 거리를 구하고 현재 scale - 1한 값을 곱한다.\n</br></br></p>\n<blockquote>\n<p>여기서 newScale - 1은 새로운 스케일과 기본 스케일의 차이이다.</br>\nnewScale이 1보다 클 때, -1을 하면 확대된 정도만큼만 계산하게 된다.</p>\n</blockquote>\n</br>\n<p>또한 다시 scale을 1로 돌려놓을 때 viewer 와 target이 일치하도록 하는 로직을 추가해준다.</p>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    initialX <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>mouseX <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>right <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>newScale <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    initialY <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>mouseY <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">-</span> rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>newScale <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>                \n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newScale <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        initialX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        initialY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    scale <span class=\"token operator\">=</span> newScale<span class=\"token punctuation\">;</span>\n    \n    target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>initialX<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px) translateY(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>initialY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px) scale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>scale<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>완성!</p>\n<p>글이 길어져서 다음편에서 Drag를 구현해보겠다</p>\n<br/>","frontmatter":{"title":"JS 줌 앤 팬(Zoom and Pan) 구현하기(1)","date":"April 26, 2024","description":"바닐라 자바스크립트로 줌 앤 팬 기능 구현해보기","tags":["JavaScript"]}},"previous":{"fields":{"slug":"/darg-drop/"},"frontmatter":{"title":"JS 드래그 앤 드롭(Drag and Drop) 구현하기"}},"next":{"fields":{"slug":"/zoom and pan 2/"},"frontmatter":{"title":"JS 줌 앤 팬(Zoom and Pan) 구현하기(2)"}}},"pageContext":{"id":"7ca95fed-c843-5300-ae8a-97ab048de0e2","previousPostId":"9eefc515-597a-5c7e-b5d9-ff0242fd3b49","nextPostId":"517732dd-55e8-5a7e-8c38-3042a26f3b3d"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}